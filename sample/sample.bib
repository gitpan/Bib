%L Yoyo38
%K temporal-logic tla binder
%Q Yoyodyne Corporation
%T Planet 10 or Bust
%R Technical Report 42
%D Oct. 1938

%L Aasa88
%K patterns olit binder
%A Annika Aasa
%A Kent Petersson
%A Dan Synek
%T Concrete Syntax for Data Objects in Functional Languages
%B Proceedings of the 1988 ACM Conference on Lisp
   and Functional Programming
%C Snowbird, Utah
%D 1988
%P 96-105

%L Abad90a
%K misc lambda fp binder 
%A Martin Abadi
%A Luca Cardelli
%A Pierre-Louis Curien
%A Jean-Jacques L\'evy
%T Explicit Substitutions
%R Technical Report 54
%I DEC Systems Research Center
%C Palo Alto, California
%D Feb. 6, 1990

%L Abad90b
%K temporal-logic tla binder
%A Martin Abadi
%T An Axiomatization of Lamport's Temporal Logic of Actions
%R Technical Report 65
%I DEC Systems Research Center
%C Palo Alto, California
%D Oct. 1990

%L Abad92a
%K linear-logic binder 
%A Martin Abadi
%A Gordon D. Plotkin
%T A Logical View of Composition
%R Technical Report 86
%I DEC Systems Research Center
%C Palo Alto, California
%D May 1992

%L Abbo84a
%K concurrency other real-time scheduling
%A C. Abbott
%T Intervention Schedules for Real-Time Programming
%J IEEE Transactions on Software Engineering
%V SE-10
%N 3
%D May 1984
%P 268-274

%L Abda86a
%K olit-appl views smalltalk oopsla86
%A S. Kamal Abdali
%A Guy W. Cherry
%A Neil Soiffer
%T A Smalltalk System for Algebraic Manipulation
%J Proceedings OOPSLA '86, ACM SIGPLAN Notices
%V 21
%N 11
%D Nov 1986
%P 277-283

%L Abet89a
%K olit-db binder
%A Serge Abetiboul
%A Paris C. Kanellakis
%T Object Identity as Query Language Primitive
%R Report no. 1022
%I INRIA
%D April 1989
%O to appear, JACM

%L Abra87a
%K pcalc equivalence binder
%A Samson Abramsky
%T Observation Equivalence as a Testing Equivalence
%J Theoretical Computer Science
%V 53
%I North-Holland
%D 1987
%P 225-241

%L Abra90a
%K concurrency linear logic binder 
%A Samson Abramsky
%T Computational Interpretations of Linear Logic
%R Research Report DOC 90/20
%I Imperial College
%C London
%D Oct. 1990

%L Abra90b
%K misc lambda fp lazy binder
%A Samson Abramsky
%T The Lazy Lambda Calculus
%B Research Topics in Functional Programming
%E D.A. Turner
%I Addison Wesley
%D 1990
%P 65-116

%L Abra91a
%K pcalc mobility
%% UNPUBLISHED
%A Samson Abramsky
%T Proofs as Processes
%D 1991
%O Vortrag auf dem International Symposium on Theoretical Computer
   Science in honor of Boris Trakhtenbrot Tel-Aviv

%L Abra92a
%K pcalc mobility
%% UNPUBLISHED
%A Samson Abramsky
%T An Introduction to ``On the \pi-Calculus and Linear Logic''
   by Gianluigi Bellin and Philip Scott
%D 1992
%O Following Lecture Material on ``Proofs and Processes''

%L Abra93a
%K misc lambda fp lazy
%A Samson Abramsky
%A C.-H. Luke On
%T Full Abstraction in the Lazy Lambda Calculus
%J Information and Computing
%I Academic Press
%V 105
%N 2
%D August 1993
%P 159-267

%L Acha93a
%K olit ecoop93
%A Bruno Achauer
%T Implementation of Distributed Trellis
%B Proceedings ECOOP '93
%E O. Nierstrasz
%S LNCS 707
%I Springer-Verlag
%C Kaiserslautern, Germany
%D July 1993
%P 103-117
%X DOWL is an extension of the Trellis language supporting
   distribution.  It allows programmers to transparently invoke
   operations on remote objects and to move objects between the nodes
   of a distributed system.  A few primitives permit the programmer to
   take full advantage of distribution and to tune performance; most
   notably by restricting the mobility of objects and specifying which
   objects should move together.  This paper describes the
   implementation of these extensions: the object format, communication
   system and the mechanism to invoke operations on remote objects.
   Performance figures are also presented.

%L Adam88a
%K olit-oopl scheme lisp 
%A Norman Adams
%A Jonathan Rees
%T Object-Oriented Programming in Scheme
%J Conference Record of the 1988 ACM Conference on Lisp
   and Functional Programming
%P 277-288
%D August 1988
%X A small set of additions to Scheme to support object-oriented
   programming, including a form of multiple inheritance is described.
   The extensions proposed are in keeping with the spirit of the Scheme
   language and consequently differ from Lisp-based object systems such
   as Flavors and the Common Lisp Object System. The extensions mesh
   neatly with the underlying Scheme system. The authors motivate the
   design with examples, and describe implementation techniques that
   yields efficiency comparable to dynamic object-oriented language
   implementations considered to be high performance. The complete
   design has an almost-portable implementation, and the core of this
   design comprises the object system used in T, a dialect of Scheme.
   The applicative bias of the approach is unusual in object- oriented
   programming systems.

%L Adam89a
%K olit oopsla89
%A Sam S. Adams
%A Abdul K. Nabi
%T Neural Agents -- A Frame of Mind
%J Proceedings OOPSLA '89, ACM SIGPLAN Notices
%V 24
%N 10
%D Oct 1989
%P 139-150

%L Ader90a
%K olit-ithaca osg cool scripting vista
%A Martin Ader
%A Oscar Nierstrasz
%A Stephen McMahon
%A Gerhard M\:uller
%A Anna-Kristin Pr\:ofrock
%T The ITHACA Technology: A Landscape for
   Object-Oriented Application Development
%B Proceedings, Esprit 1990 Conference
%I Kluwer Academic Publishers
%C Dordrecht, NL
%D 1990
%P 31-51
%X The ITHACA environment offers an application support system which
   incorporates advanced technologies in the fields of object-oriented
   programming in general and programming languages, database
   technologies, user interface systems and software development tools in
   particular. ITHACA provides an integrated and open-ended toolkit which
   exploits the benefits of object-oriented technologies for promoting
   reusability, tailorability and integratability, factors which are
   crucial for ensuring software quality and productivity. Industrial
   applications from the fields of office automation, public
   administration, finance/insurance and chemical engineering are
   developed in parallel and used to evaluate the suitability of the
   system.
%% CONFERENCE

%L Mong93
%K olit-ithaca ithaca-final
%A Josep Mongui\'o
%T COP overview
%I TAO S.A.
%D 31/12/93
%X WooRKS is a workflow package which has been developed to prove
   the usefulness of the ITHACA development environment.
   A workflow package is characterised by the coordination
   and routing mechanisms which allow to control the interaction
   and to schedule the work to be performed by office workers.
   Within this paper we describe COP, the module implementing
   the coordination functionality of WooRKS.
%% ftp: cui.unige.ch:OO-articles/ITHACA/cop.ps.Z

%L Ader94a
%K olit-ithaca ithaca-final
%A Martin Ader
%A Gang Lu
%A Patrick Pons
%A Josep Monguio
%A Lose Lopez
%A Giorgio De Michelis
%A M. Antonietta Grasso
%A George Vlondakis
%T WooRKS, an Object Oriented WorkflowSystem for Offices
%R ITHACA technical report
%I Bull S.A., T.A.O. S.A., Universit\'a di Milano, and
   Communication and Management Systems Unit
%D 1994
%X A lot of routine office tasks (e.g., processing an order in a retail
   company) can be described as structured recurring tasks (called
   \fIprocedures\fR) whose basic items (called \fIactivities\fR) must
   be performed by various persons and computers (called \fIactors\fR)
   in a certain order (sequential or parallel). Inside a procedure, the
   coordination between actors in different places is asynchronous and
   is characterized by the circulation of folders, forms or papers.
   Many procedures can spread over several weeks. \fIWoorks\fR is an
   object-oriented workflow system designed to assist organizations in
   defining, executing, coordinating, and monitoring workflow
   procedures based on a shared environment. WooRKS architecture relies
   on an object oriented database management system upon which all the
   objects are represented and supported by a UNIX (TM) server, and
   clients distributed through TCP/IP protocol runing Microsoft Windows
   (TM) or OSF/Motif (TM). WooRKS incorporates several interrelated
   models that can be used together or separately: an \fIorganization
   model\fR for specifying the actors, an \fIinformation module\fR for
   defining information to be handled, a \fItime model\fR for
   controlling when actions must be executed, an \fIoperator model\fR
   for implementing atomic operations on information, and a
   \fIprocedure model\fR for combining together these various
   components. Through the use of object oriented technologies, WooRKs
   provides: a comprehensive system to design, implement and
   administrate workflow applications; a consistent set of high-level
   formalisms to describe a workflow application; a powerful
   organizational model; extensive time and external management
   utilities; a graphical editor for the workflow procedure definition;
   easy integration with existing office applications; an informative
   and consistent end user interface; discretionary security control;
   and high reusability of software components enabling quick delivery
   of customer-specified workflow applications.
%% ftp: cui.unige.ch:OO-articles/ITHACA/WooRKS

%L Ages93a
%K olit ecoop93
%A Ole Agesen
%A Jens Palsberg
%A Michael I. Schwartzbach
%T Type Inference of SELF: Analysis of Objects with Dynamic and
   Multiple Inheritance
%B Proceedings ECOOP '93
%E O. Nierstrasz
%S LNCS 707
%I Springer-Verlag
%C Kaiserslautern, Germany
%D July 1993
%P 247-267
%X We have designed and implemented a type inference algorithm for the
   full Self language. The algorithm can guarantee the safety and
   disambiguity of message sends, and provide useful information for
   browsers and optimizing compilers. Self features objects with
   dynamic inheritance. This construct has until now been considered
   incompatible with type inference because it allows the inheritance
   graph to change dynamically. Our algorithm handles this by deriving
   and solving type constraints that simultaneously define supersets of
   both the possible values of expressions and of the possible
   inheritance graphs. The apparent circularity is resolved by
   computing a global fixed-point, in polynomial time.  The algorithm
   has been implemented and can successfully handle the Self benchmark
   programs, which exist in the "standard Self world" of more than
   40,000 lines of code.
%% ftp: daimi.aau.dk:pub/palsberg/papers/ecoop93.ps.Z

%L Agh93c
%K olit-obc binder 
%E Gul Agha
%E Peter Wegner
%E Akinori Yonezawa
%T Research Directions in Concurrent Object-Oriented Programming
%I MIT Press
%D 1993

%L Agha85a
%K concurrency messages actors
%A Gul Agha
%T A Message-Passing Paradigm for Object Management
%J IEEE Database Engineering
%V 8
%N 4
%D Dec 1985
%P 75-82

%L Agha86a
%K olit-obc concurrency messages actors oopws86
%A Gul Agha
%T An Overview of Actor Languages
%J ACM SIGPLAN Notices
%V 21
%N 10
%D Oct 1986
%P 58-67

%L Agha86b
%K olit-obc semantics obib
%A Gul Agha
%T ACTORS: A Model of Concurrent Computation in Distributed Systems
%I MIT Press
%C Cambridge, Massachusetts
%D 1986

%L Agha93a
%K olit-obc actors semantics
%A Gul Agha
%A Ian Mason
%A Scott Smith
%A Carolyn Talcott
%T A Foundation for Actor Computation
%R technical report
%I UIUC
%D 1993
%X We present an actor language which is an extension of a simple
   functional language, and provide a precise operational semantics for
   this extension.  Actor configurations are open distributed systems,
   meaning we explicitly take into account the interface with external
   components in the specification of an actor system.  We define and
   study various notions of equivalence on actor expressions and
   configurations.
%% ftp: sail.stanford.edu:pub/MT/93actors.ps.Z

%L Agha93b
%K olit-obc binder
%A Gul Agha
%A Svend Fr\/olund
%A Woo Young Kim
%A Rajendra Panwar
%A Anna Patterson
%A Daniel Sturman
%T Abstraction and Modulairt Mechanisms for Concurrent Computing
%J IEEE Parallel and Dsitributed Technology
%D May 1993
%P 3-14

%L Agra91a
%K types olit oopsla91
%A Rakesh Agrawal
%A Linda G. DeMichiel
%A Bruce G. Lindsay
%T Static Type Checking of Multi-Methods
%J Proceedings OOPSLA '91, ACM SIGPLAN Notices
%V 26
%N 11
%D Nov 1991
%P 113-128

%L Ahls83a
%K oislit survey
%A Matts Ahls\'en
%A Anders Bj\:ornerstedt
%A Stefan Britts
%A Christer Hult\'en
%A Lars S\:oderlund
%T A Survey of Office Information Systems
%R Syslab, WP 44
%I University of Stockholm
%D March 15, 1983

%L Ahls84a
%K olit-oopl opal ois
%A Matts Ahls\'en
%A Anders Bj\:ornerstedt
%A Stefan Britts
%A Christer Hult\'en
%A Lars S\:oderlund
%T An Architecture for Object Management in OIS
%J ACM TOOIS
%V 2
%N 3
%D July 1984
%P 173-196

%L Ahls84b
%K types other
%A Matts Ahls\'en
%A Anders Bj\:ornerstedt
%A Stefan Britts
%A Christer Hult\'en
%A Lars S\:oderlund
%T Making Type Changes Transparent
%R Syslab report #22
%I University of Stockholm
%D Feb 1984

%L Ahls85a
%K olit-oopl opal
%A M. Ahls\:en
%A Anders Bj\:ornerstedt
%A C. Hult\:en
%T OPAL: An Object-Based System for Application Development
%J IEEE Database Engineering
%V 8
%N 4
%D Dec 1985
%P 31-40

%L Aho72a
%K compiler book
%A Alfred V. Aho
%A Jeffrey D. Ullman
%T The Theory of Parsing, Translation and Compiling
%I Prentice Hall
%D 1972

%L Aho74a
%K misc algorithms book
%A Alfred V. Aho
%A J.E. Hopcroft
%A Jeffrey D. Ullman
%T The Design and Analysis of Computer Algorithms
%I Addison Wesley
%D 1974

%L Aho75a
%K patterns unix searching
%A Alfred V. Aho
%A M.J. Corasick
%T Fast Pattern Matching: An Aid to Bibliographic Search
%J CACM
%V 18
%N 6
%D June 1975
%P 333-340

%L Aho78a
%K patterns unix awk searching
%A Alfred V. Aho
%A B. Kernighan
%A P. Weinberger
%T Awk -- A Pattern Scanning and Processing Language
%R Report
%I Bell Telephone Laboratories
%D Sept 1978

%L Aho86a
%K compiler book binder 
%A Alfred V. Aho
%A Ravi Sethi
%A Jeffrey D. Ullman
%T Compilers: Principles, Techniques and Tools
%I Addison-Wesley, Inc.
%D 1986

%L Ahuj86a
%K concurrency linda
%A S. Ahuja
%A N. Carriero
%A D. Gelernter
%T Linda and Friends
%J IEEE Computer
%V 19
%N 8
%D August 1986
%P 26-34

%L AitK91a
%K plang life olit plilp91 binder
%A Hassan A\:it-Kaci
%A Andreas Podelski
%T Towards a Meaning of LIFE
%B Proceedings PLILP '91
%E J. Maluszynski and M. Wirsing
%S LNCS 528
%I Springer-Verlag
%C Passau, Germany
%D Aug. 1991
%% D.1.6 PRO
%P 255-274
%% ftp: gatekeeper.dec.com:pub/DEC/PRL/research-reports/PRL-RR-11.ps.Z

%L Aksi88a
%K olit-oopl sina oopsla88
%A Mehmet Aksit
%A Anand Tripathi
%T Data Abstraction Mechanisms in SINA/ST
%J Proceedings OOPSLA '88, ACM SIGPLAN Notices
%V 23
%N 11
%D Nov 1988
%P 267-275

%L Aksi89a
%K olit-obcl sina binder 
%A Mehmet Aksit
%T On the Design of the Object-Oriented Language Sina
%R Ph.D. thesis
%I University of Twente
%D 1989

%L Aksi92a
%K olit oopsla92
%A Mehmet Aksit
%A Lodewijk Bergmans
%T Obstacles in Object-Oriented Software Development
%J Proceedings OOPSLA '92, ACM SIGPLAN Notices
%V 27
%N 10
%D Oct 1992
%P 341-358

%L Aksi92b
%K olit-oopl sina ecoop92
%A Mehmet Aksit
%A Lodewijk Bergmans
%A Sinan Vural
%T An Object-Oriented Language-Database Integration Model:
   The Composition-Filters Approach
%B Proceedings ECOOP '92
%E O. Lehrmann Madsen
%S LNCS 615
%I Springer-Verlag
%C Utrecht, The Netherlands
%D June/July 1992
%P 372-395

%L Aksi93a
%K olit-obc act binder
%A Mehmet Aksit
%A Ken Wakita
%A Jan Bosch
%A Lodewijk Bergmans
%A Akinori Yonezawa
%T Abstracting Inter-Object Communications Using Composition Filters
%R draft manuscript
%I University of Twente
%D 1993

%L Aksi94a
%K olit-obc obdp93
%A Mehmet Aksit
%A Ken Wakita
%A Jan Bosch
%A Lodewijk Bergmans
%A Akinori Yonezawa
%T Abstracting Object Interactions Using Composition Filters
%B Proceedings of the ECOOP '93 Workshop on
   Object-Based Distributed Programming
%E R. Guerraoui, O Nierstrasz, M. Riveill
%S LNCS 791
%I Springer-Verlag
%D 1994
%P 152-184
%X It is generally claimed that object-based models are very suitable
   for building distributed system architectures since object
   interactions follow the client-server model.  To cope with the
   complexity of today's distributed systems, however, we think that
   high-level linguistic mechanisms are needed to effectively
   structure, abstract and reuse object interactions.  For example, the
   conventional object-oriented model does not provide high-level
   language mechanisms to model layered system architectures.
   Moreover, we consider the message passing model of the conventional
   object-oriented model as being too low-level because it can only
   specify object interactions that involve two partner objects at a
   time and its semantics cannot be extended easily.  This paper
   introduces Abstract Communication Types (ACTs), which are objects
   that abstract interactions among objects.  ACT s make it easier to
   model layered communication architectures, to enforce the invariant
   behavior among objects, to reduce the complexity of programs by
   hiding the interaction details in separate modules and to improve
   reusability through the application of object-oriented principles to
   ACT classes.  We illustrate the concept of ACT s using the
   composition filters model.

%L Alab88a
%K olit oopsla88
%A Bruno Alabiso
%T Transformation of Data Flow Analysis Models to Object-Oriented Design
%J Proceedings OOPSLA '88, ACM SIGPLAN Notices
%V 23
%N 11
%D Nov 1988
%P 335-354

%L Alag88a
%K olit-oodb 
%A Suad Alagic
%T Object-Oriented Database Programming
%S Texts and Monographs in Computer Science
%C New York
%D 1988

%L Alba83a
%K olit-oopl galileo
%A Antonio Albano
%A R. Orsini
%T Dialogo: An Interactive Environment for Conceptual Design in Galileo
%B Methodology and Tools for Database Design
%E S. Ceri
%I North-Holland
%D 1983

%L Alba85a
%K olit-oopl galileo
%A Antonio Albano
%A Luca Cardelli
%A R. Orsini
%T Galileo: A Strongly-Typed, Interactive Conceptual Language
%J ACM TODS
%V 10
%N 2
%D June 1985
%P 230-260

%L Alen91a
%K olit ecoop91
%A Antonio J. Alencar
%A Joseph A. Goguen
%T OOZE: An Object-Oriented Z Environment
%B Proceedings ECOOP '91
%E P. America
%S LNCS 512
%I Springer-Verlag
%C Geneva, Switzerland
%D July 15-19, 1991
%P 180-199

%L Alex77a
%K patterns
%A Christopher Alexander
%A Sara Ishakawa
%A Murray Silverstein
%T A Pattern Language
%I Oxford University Press
%C New York
%D 1977

%L Alex87a
%K olit oopsla87
%A James H. Alexander
%T Painless Panes for Smalltalk Windows
%J Proceedings OOPSLA '87, ACM SIGPLAN Notices
%V 22
%N 12
%D Dec 1987
%P 287-294

%L Alma89a
%K olit oopsla89
%A Jay Almarode
%T Rule-Based Delegation for Prototypes
%J Proceedings OOPSLA '89, ACM SIGPLAN Notices
%V 24
%N 10
%D Oct 1989
%P 363-370

%L Alma91a
%K olit ecoop91
%A Jay Almarode
%T Issues in the Design and Implementation of a Schema Designer for an OODBMS
%B Proceedings ECOOP '91
%E P. America
%S LNCS 512
%I Springer-Verlag
%C Geneva, Switzerland
%D July 15-19, 1991
%P 200-218

%L Alme80a
%K olit memory
%A Guy T. Almes
%T Garbage Collection in an Object-Oriented System
%R Ph.D. thesis
%I Carnegie Mellon University
%C Pittsburgh, PA
%D 1980

%L Aloi92a
%K olit ecoop92
%A Nicola Aloia
%A Svetlana Barneva
%A Fausto Rabitti
%T Supporting Physical Independence in an Object Database Server
%B Proceedings ECOOP '92
%E O. Lehrmann Madsen
%S LNCS 615
%I Springer-Verlag
%C Utrecht, The Netherlands
%D June/July 1992
%P 396-412

%L Amad91a
%K types popl91 
%A Roberto M. Amadio
%A Luca Cardelli
%T Subtyping Recursive Types
%B Proceedings POPL '91
%D 1991
%P 104-118

%L Amad93a
%K pcalc chocs binder
%A Roberto M. Amadio
%T On the Reduction of Chocs Bisimulation to \pi-calculus Bisimulation
%B Proceedings of CONCUR'93
%E E. Best
%S LNCS 715
%I Springer-Verlag
%D 1993
%P 112-126
%% Cote:  F.1.2 CON

%L Ambl91a
%K pcalc mobility 
%% TECHREPORT
%A Simon Ambler
%T A de Bruijn notation for the \pi-calculus
%I University of London
%D 1991

%L Amer86a
%K olit-obc pool
%A Pierre America
%T Definition of the programming language POOL-T
%R Doc. No. 0091
%I Philips Research Laboratories
%C Eindhoven, The Netherlands
%D October 6, 1986

%L Amer86b
%K olit-obc pool
%A Pierre America
%T Rationale for the design of POOL
%R Doc. No. 0053
%I Philips Research Laboratories
%C Eindhoven, The Netherlands
%D January 8, 1986

%L Amer86c
%K olit-obcl pool concurrency semantics binder popl86
%A Pierre America
%A Jaco de Bakker
%A Joost N. Kok
%A Jan Rutten
%T Operational Semantics of a Parallel Object-Oriented Language
%B Proceedings POPL '86
%C St. Petersburg Beach, Florida
%D Jan 13-15, 1986
%P 194-208

%L Amer87a
%K concurrency semantics binder
%A Pierre America
%A Jaco W. de Bakker
%T Designing Equivalent Semantic Models for Process Creation
%R CS-R8732
%I CWI
%C Amsterdam
%D July 1987

%L Amer87b
%K olit-obcl inheritance types pool ecoop87
%A Pierre America
%T Inheritance and Subtyping in a Parallel Object-Oriented Language
%B Proceedings ECOOP '87
%S LNCS 276
%E J. B\'ezivin, J-M. Hullot, P. Cointe and H. Lieberman
%I Springer Verlag
%C Paris, France
%D June 15-17, 1987
%P 234-242

%L Amer87c
%K olit-obcl pool oocp87
%A Pierre America
%T POOL-T: A Parallel Object-Oriented Language
%B Object-Oriented Concurrent Programming
%E A. Yonezawa, M. Tokoro
%I MIT Press
%C Cambridge, Massachusetts
%D 1987
%P 199-220

%L Amer89a
%K olit-obcl pool semantics
%A Pierre America
%A Jaco de Bakker
%A J. Kok
%A Jan Rutten
%T Denotational Semantics of a Parallel Object-Oriented Language
%J Information and Computation
%V 83
%N 2
%D Nov 1989
%P 152-205

%L Amer89b
%K olit-obcl pool semantics
%A Pierre America
%A Jaco de Bakker
%A Jan Rutten
%T A Parallel Object-Oriented Language: Design and Semantic Foundations
%R Ph.D. theses
%I CWI, Free University of Amsterdam
%D 1989

%L Amer90a
%K olit-obcl pool binder
%A Pierre America
%A Jan Rutten
%T A Layered Semantics for a Parallel Object-Oriented Language
%B Proc. REX/FOOLS Workshop
%C Noordwijkerhout
%D June 1990
%O to appear

%L Amer90b
%K olit-obcl pool oopsla90 ecoop90
%A Pierre America
%T A Parallel Object-Oriented Language with Inheritance and Subtyping
%J Proceedings OOPSLA/ECOOP '90, ACM SIGPLAN Notices
%V 25
%N 10
%D Oct 1990
%P 161-168

%L Amer90c
%K olit-obcl pool-i binder
%A Pierre America
%T Designing an Object-Oriented Programming Language with Behavioural Subtyping
%B Proc. REX/FOOLS Workshop
%C Noordwijkerhout
%D June 1990
%O to appear

%L Amer92a
%K olit-obc obc91
%A Pierre America
%T Formal Techniques for Parallel Object-Oriented Languages
%B Proceedings of the ECOOP '91 Workshop on Object-Based Concurrent Computing
%E M. Tokoro, O. Nierstrasz, P. Wegner
%S LNCS 612
%I Springer-Verlag
%D 1992
%P 119-140

%L Ande86a
%K olit-appl flamingo ui oopsla86
%A David B. Anderson
%T Experience with Flamingo: A Distributed, Object-Oriented
   User Interface System
%J Proceedings OOPSLA '86, ACM SIGPLAN Notices
%V 21
%N 11
%D Nov 1986
%P 177-185

%L Ande92a
%K olit ecoop92
%A Egil P. Andersen
%A Trygve Reenskaug
%T System Design by Composing Structures of Interacting Objects
%B Proceedings ECOOP '92
%E O. Lehrmann Madsen
%S LNCS 615
%I Springer-Verlag
%C Utrecht, The Netherlands
%D June/July 1992
%P 133-152

%L Ande92b
%K olit-obcl ellie joop
%A Birger Andersen
%T Ellie: a General, Fine-Grainedm First-Class, Object-Based Language
%J Journal of Object-Oriented Programming
%V 5
%N 2
%D May 1992
%P 35-42

%L Ande93a
%K types olit binder
%A Egil P. Andersen
%T Substitutability of Abstract Behaviour Descriptions
%R preliminary draft
%I University of Oslo
%D 1993
%% ftp: ftp.ifi.uio.no:pub/rolem/BDConformance.ps.Z

%L Andr81a
%K concurrency
%A Gregory R. Andrews
%T Synchronizing Resources
%J ACM TOPLAS
%V 3
%N 4
%D Oct 1981
%P 405-430

%L Andr83a
%K concurrency binder
%A Gregory R. Andrews
%A Fred B. Schneider
%T Concepts and Notations for Concurrent Programming
%J ACM Computing Surveys
%V 15
%N 1
%D March 1983
%P 3-43

%L Andr87a
%K olit-oopl oodb vbase oopsla87
%A Timothy Andrews
%A Craig Harris
%T Combining Language and Database Advances in an Object-Oriented
   Development Environment
%J Proceedings OOPSLA '87, ACM SIGPLAN Notices
%V 22
%N 12
%D Dec 1987
%P 430-440

%L Andr89a
%K olit-obcl lo binder
%A Jean-Marc Andreoli
%A Remo Pareschi
%T Logic Programming with Sequent Systems -- A Linear Logic Approach
%B Proceedings of the Workshop on Extensions of Logic Programming
%S LNCS
%I Springer-Verlag
%D 1989

%L Andr90a
%K olit-obcl lo concurrency binder
%A Jean-Marc Andreoli
%A Remo Pareschi
%T Linear Objects: Logical Processes with Built-In Inheritance
%B Proceedings 7th ICLP
%C Jerusalem
%D 1990

%L Andr90b
%K olit-obcl lo oopsla90 ecoop90
%A Jean-Marc Andreoli
%A Remo Pareschi
%T LO and Behold! Concurrent Structured Processes
%J Proceedings OOPSLA/ECOOP '90, ACM SIGPLAN Notices
%V 25
%N 10
%D Oct 1990
%P 44-56

%L Andr91a
%K olit oopsla91
%A Jean-Marc Andreoli
%A Remo Pareschi
%T Communication as Fair Distribution of Knowledge
%J Proceedings OOPSLA '91, ACM SIGPLAN Notices
%V 26
%N 11
%D Nov 1991
%P 212-229

%L Andr91b
%K olit-obcl lo concurrency binder
%A Jean-Marc Andreoli
%A Remo Pareschi
%T Linear Objects: Logical Processes with Built-In Inheritance
%J New Generation Computing
%V 9
%I OHMSHA and Springer-Verlag
%D 1991
%P 445-473

%L Andr92a
%K concurrency binder
%A Jean-Marc Andreoli
%A Lone Leth
%A Remo Pareschi
%A Bent Thomsen
%T On the Chemistry of Broadcasting
%R draft
%I ECRC, Munich
%D 1992

%L Andr92b
%K olit oopsla92
%A Pascal Andr\'e
%A Jean-Claude Royer
%T Optimizing Method Search with Lookup Caches and Incremental Coloring
%J Proceedings OOPSLA '92, ACM SIGPLAN Notices
%V 27
%N 10
%D Oct 1992
%P 110-126

%L Andr92c
%K olit-obc obc91
%A Jean-Marc Andreoli
%A Remo Pareschi
%A Marc Bourgois
%T Dynamic Programming as Multiagent Programming
%B Proceedings of the ECOOP '91 Workshop on Object-Based Concurrent Computing
%E M. Tokoro, O. Nierstrasz, P. Wegner
%S LNCS 612
%I Springer-Verlag
%D 1992
%P 163-176

%L Andr92d
%K pcalc mobility 
%% BOOK
%A Michael Andres
%A Anke Richter
%T Beschreibung `mobiler Prozesse' mit Graphgrammatiken
%I Studienarbeit, Universit\:at Erlangen
%D 1992

%L Andr93a
%K concurrency binder
%A Jean-Marc Andreoli
%A Paolo Ciancarini
%A Remo Pareschi
%T Interaction Abstract Machines
%B Research Directions in Object-Based Concurrency
%E G. Agha, P. Wegner and A. Yonezawa
%D 1993
%O to appear

%L Andr93b
%K concurrency binder tapsoft93
%A Jean-Marc Andreoli
%A Lone Leth
%A Remo Pareschi
%A Bent Thomsen
%T True Concurrency Semantics for a Linear Logic Programming Language
   with Broadcast Communication
%B Proceedings TAPSOFT '93
%S LNCS
%I Springer-Verlag
%D 1993
%O to appear

%L Appe92a
%K compiler sml binder 
%A Andrew W. Appel
%T Compiling with Continuations
%I Cambridge University Press
%D 1992

%L Arap88a
%K olit osb osg aoe88
%A Costas Arapis
%A Gerti Kappel
%T An Object Software Base
%R Active Object Environments
%E D. Tsichritzis
%I Centre Universitaire d'Informatique, University of Geneva
%D June 1988
%P 32-50

%L Arap89a
%K types olit osg ood89
%A Costas Arapis
%T Type Conversion and Enhancement in Object-Oriented Systems
%R Object Oriented Development
%E D. Tsichritzis
%I Centre Universitaire d'Informatique, University of Geneva
%D July 1989
%P 191-205

%L Arap90a
%K olit osg-ftp om90
%A Costas Arapis
%T Specifying Object Life-Cycles
%R Object Management
%E D. Tsichritzis
%I Centre Universitaire d'Informatique, University of Geneva
%D July 1990
%P 197-225
%X In this paper we propose a number of extensions for object-oriented
   models in order to describe dynamic aspects of applications. These
   extensions enable the specification of objects that modify their
   behavior dynamically and the control of the dynamic evolution of
   objects by means of constraints expressed in the language of
   propositional temporal logic. We shall point out what differentiates
   our proposal from existing models and give examples to illustrate our
   arguments. We also present an algorithm for verifying consistency of
   specifications and which is suitable for an eventual implementation of
   our extensions.
%% ftp: cui.unige.ch:OO-articles/objectLifeCycle.ps.Z

%L Arap91a
%K olit osg
%A Costas Arapis
%T Temporal Specifications of Object Behaviour
%B Proceedings Third International Symposium on Mathematical
   Fundamentals of Database and Knowledge Base Systems
%E B. Thalheim, J. Demetrovics, H-D. Gerhardt
%S LNCS 495
%I Springer-Verlag
%C Rostock, Germany
%D May 1991
%% H.2.1
%P 308-324

%L Arap91b
%K olit osg oc91
%A Costas Arapis
%T Specifying Object Interactions
%R Object Composition
%E D. Tsichritzis
%I Centre Universitaire d'Informatique, University of Geneva
%D June 1991
%P 303-322
%O Working paper
%X Techniques for specifying temporal properties of an application are
   presented, based on the assumption that static and behavioral
   properties have been described within some object-oriented model. These
   techniques enable the specification of the dynamic evolution of object
   behavior and the interactions of collections of cooperating objects.
   The underlying formalism used for our specifications is the language of
   first-order temporal logic. A method for checking consistency of
   specifications is also presented.

%L Arap92a
%% CB11
%K olit osg of92 osg-book
%A Costas Arapis
%T Object Behavior Composition: A Temporal Logic Based Approach
%R Object Frameworks
%E D. Tsichritzis
%I Centre Universitaire d'Informatique, University of Geneva
%D July 1992
%P 79-107
%X A critical aspect of object-oriented design methodologies is what
   has been called the behavioral composition of objects. That is, how
   to reuse, combine and coordinate the functionality of existing
   objects when developing new objects. This paper presents an approach
   emphasizing the specification of temporal aspects of behavioral
   composition. Using propositional temporal logic as the underlying
   formalism of our approach, we show how to verify the consistency of
   specifications and how to monitor adherence to the specifications
   during run time.
%% ftp: cui.unige.ch:OO-articles/tr92arapis.ps.Z

%L Arap92b
%K olit osg-phd binder 
%A Costas Arapis
%T Dynamic Evolution of Object Behaviour and Object Cooperation
%R Ph.D. thesis (no. 2529)
%I Dept. of Computer Science, University of Geneva
%D 1992

%L Ashf93a
%K olit ecoop93
%A Colin Ashford
%T The OSI Managed-Object Model
%B Proceedings ECOOP '93
%E O. Nierstrasz
%S LNCS 707
%I Springer-Verlag
%C Kaiserslautern, Germany
%D July 1993
%P 185-196
%X The challenge facing the International Organization for
   Standardization (ISO) in the early eighties, in developing Open
   Systems Interconnection (OSI) protocol standards for network
   management, was to ensure that such protocols should, on the one
   hand, be standardised but, on the other, be capable of managing a
   myriad of resource types.  ISO met the challenge by developing a
   single internationally-standardised carriage protocol (CMIP), and
   tools to produce information models that would reflect the resources
   being managed. Such an approach makes it possible for the same
   carriage protocol to carry management messages for many different
   types of resources. In developing its information modelling tools
   and services, ISO has adopted an object-oriented approach: the
   resources to be managed are modelled as managed objects or
   aggregates of managed objects. The managed-object model is similar
   to popular object-oriented programming-language models but it
   includes a number of features that reflect the special requirements
   of network management. These requirements include: asynchronous
   operation, active resources, a distributed environment,
   compatibility, and feature optionality.  Fulfilling these
   requirements lead to the inclusion of concepts such as
   event-notification, multiple object-selection, packages, and
   allomorphism. The next generation of network-management standards
   will need to address the demands of large, multi-protocol, mutable
   networks.  How these requirements might affect the evolution of the
   managed-object model and services is considered.

%L Asse93a
%K olit ecoop93
%A Holger Assenmacher
%A Thomas Breitbach
%A Peter Buhler
%A Volker H\:ubsch
%A Reinhard Schwarz
%T PANDA -- Supporting Distributed Programming in C++
%B Proceedings ECOOP '93
%E O. Nierstrasz
%S LNCS 707
%I Springer-Verlag
%C Kaiserslautern, Germany
%D July 1993
%P 361-383
%X PANDA is a run-time package based
   on a very small operating system kernel which supports distributed
   applications written in C++. It provides powerful abstractions such
   as very efficient user-level threads, a uniform global address
   space, object and thread mobility, garbage collection, and
   persistent objects. The paper discusses the design rationales
   underlying the PANDA system. The fundamental features of PANDA are
   surveyed, and their implementation in the current prototype
   environment is outlined.

%L Aste84a
%K pcalc mobility (uwe)
%% ARTICLE
%A Egidio Astesiano
%A Elena Zucca
%T Parametric Channels via Label Expressions in CCS
%J Theoretical Computer Science
%V 33
%D 1984
%P 45-64

%L Astr76a
%K dblit
%A M.M. Astrahan, et al.
%T System R: Relational Approach to Database Management
%J ACM TODS
%V 1
%N 2
%D June 1976
%P 97-137

